{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","Searchboxer.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","CardList","robots","CardComponent","map","user","i","key","SearchBoxer","searchfields","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","console","log","length","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCGSC,EAjBJ,SAACC,GAAS,IACbC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,MAAOC,EAAKH,EAALG,GAEpB,OAEC,yBAAMC,UAAU,uDAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACA,4BAAKF,GACL,2BAAIC,MCFSK,EAPA,SAAC,GACf,IADgBC,EACjB,EADiBA,OACTC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GAAK,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAKK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,WAC1H,OAAO,6BACJO,ICCWK,EANG,SAAC,GACnB,EADoBC,aACnB,IADgCC,EACjC,EADiCA,aAC/B,OACD,yBAAKZ,UAAU,OACf,2BAAOA,UAAU,mCAAmCa,KAAK,SAASC,YAAY,uBAAuBC,SAAUH,MCOjGI,EATD,SAACpB,GAEd,OACO,yBAAKqB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAChExB,EAAMyB,WCgDAC,E,kDA/Cd,aACC,IAAD,8BACC,gBAiBDC,eAAe,SAACC,GAEf,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAlB1C,EAAKC,MAAM,CAEXzB,OAAO,GACPsB,YAAY,IALZ,E,gEAUoB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAW,OAAOA,EAASC,UAChCF,MAAK,SAAAG,GAAQ,EAAKT,SAAS,CAACrB,OAAO8B,S,+BAYlC,IAAD,OAAQC,EAAeC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAC,GAAU,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAE3H,OADAE,QAAQC,IAAIP,GACkB,IAA3BC,KAAKP,MAAMzB,OAAOuC,OAEb,2CAKT,yBAAK3C,UAAU,MACX,2CACA,kBAAC,EAAD,CAAaY,aAAcwB,KAAKb,iBACjC,kBAAC,EAAD,KACH,kBAAC,EAAD,CAAUnB,OAAQ+B,U,GAxCDS,aCGlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,6BACE,kBAAC,EAAD,QAIFC,SAASC,eAAe,SNkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,a","file":"static/js/main.62fe0d38.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n\r\nconst Card=(props)=>{\r\n\tconst{ name, email, id }=props;\r\n\r\n\treturn(\r\n\t\t\r\n\t\t<div  className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\r\n\t\t</div>\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card'\r\n\r\nconst CardList=({robots})=>\r\n{ const CardComponent=robots.map((user,i)=>{return <Card key={i} id={ robots[i].id} name={robots[i].name} email={robots[i].email}/> })\r\n\treturn(<div>\r\n   {CardComponent}\r\n    </div>);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBoxer=({searchfields,searchChange})=>\r\n{ return( \r\n\t<div className=\"pa2\">\r\n\t<input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"type for robofriends\" onChange={searchChange} />\r\n    </div>);\r\n}\r\nexport default SearchBoxer;","import React from 'react';\r\n\r\n\r\nconst Scroll= (props) =>{\r\n\r\n\treturn (\r\n        <div style={{overflowY:'scroll',border:'1px solid black' ,height:'500px'}}>\r\n        {props.children}\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nimport CardList from './CardList';\r\nimport SearchBoxer from './Searchboxer';\r\nimport Scroll from './Scroll';\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor()\r\n\t{\r\n\t super();\r\n\tthis.state={\r\n\t\r\n\trobots:[],\r\n\tsearchfield:''\r\n               \r\n               }\r\n\t\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response=>{return response.json();})\r\n\t\t.then(users=>{this.setState({robots:users})});\r\n\t\t\t\r\n\t\t\r\n\r\n\t}\r\n\tonSearchChange=(event)=>\r\n\t{\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t\t/*onst filteredRobots=this.state.robots.filter(robot => {return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());})\r\n\t\tconsole.log(filteredRobots);*/\r\n\t}\r\n   render()\r\n   { const filteredRobots=this.state.robots.filter(robot => {return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());})\r\n\t\tconsole.log(filteredRobots);\r\n\t\tif(this.state.robots.length===0)\r\n\t\t{\r\n\t\t\treturn <h1>Loading....</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n   \treturn (\r\n\t<div className='tc'>\r\n     <h1>RoboFriends</h1>\r\n     <SearchBoxer searchChange={this.onSearchChange} />\r\n    <Scroll>\r\n\t<CardList robots={filteredRobots}/>\r\n\t</Scroll>\r\n\t</div>\r\n\t);\r\n   }\r\n}\r\n\r\n};\r\nexport default App;","import React from 'react';\nimport 'tachyons';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\n\n// import Card from './Card';\nimport * as serviceWorker from './serviceWorker';\n/*import { robots } from './robots';*/\nimport App from './App'\nReactDOM.render(\n  <React.StrictMode>\n  <div>\n    <App/>\n    \n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}